{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Top","href","styles","container","width","padding","margin","background","borderRadius","display","flexDirection","alignItems","password","border","outline","statusBar","height","marginTop","strengthMeter","maxWidth","backgroundColor","message","button","cursor","color","fontWeight","disabledButton","opacity","App","re","useState","symbols","setSymbols","setPassword","passwordStrength","setPasswordStrength","isButtonDisabled","setIsButtonDisabled","useEffect","length","style","type","value","onChange","event","enteredValue","target","trim","match","placeholder","disabled","onClick","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a8dbc80.chunk.js","sourcesContent":["// App.tsx\nimport React, { useState, useEffect } from \"react\";\nimport './index.css';\n\n// Declare password strength type\ntype PasswordStrength =\n  | \"Very Weak\"\n  | \"Weak\"\n  | \"Medium\"\n  | \"Strong\"\n  | \"Very Strong\";\n\nconst Top: React.FunctionComponent = () => {\n  return(\n    <div>\n      <h1>Tyler's Password Strength Checker</h1>\n      <h2><a href =\"https://github.com/strrules105/Password-Strength-Checker\">Github Repository</a></h2>\n    </div>\n  )\n}\n\n\nconst App: React.FunctionComponent = () => {\n  // The password\n  const re=/[^A-Z][^a-z]/g //regex to search for symbols/numbers in password to increase complexity\n  const [symbols, setSymbols] = useState<number>(0);\n  const [password, setPassword] = useState<string>(\"\");\n  const [passwordStrength, setPasswordStrength] =\n    useState<PasswordStrength>(\"Very Weak\");\n  const [isButtonDisabled, setIsButtonDisabled] = useState<boolean>(true);\n\n  // This function will be triggered when the password input field changes\n  const inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const enteredValue = event.target.value.trim();\n    //Counts occurrences of non letters and sets symbol count\n    const count = (str: string) => {\n      return ((str || '').match(re) || []).length\n    }\n    setSymbols(count(enteredValue));\n    setPassword(enteredValue);\n  };\n\n  useEffect(() => {\n    if (password.length >=0 && password.length <4 && symbols===0) {\n      setPasswordStrength(\"Very Weak\");\n      setIsButtonDisabled(true);\n      (styles.strengthMeter.backgroundColor as string) = \"red\";\n    } \n    else if (password.length >= 4 && password.length < 6 && symbols<=1) {\n      setPasswordStrength(\"Weak\");\n      setIsButtonDisabled(true);\n      (styles.strengthMeter.backgroundColor as string) = \"orange\";\n    } \n    else if (password.length >= 6 && password.length < 8 && symbols >=2) {\n      setPasswordStrength(\"Medium\");\n      (styles.strengthMeter.backgroundColor as string) = \"yellow\";\n    } \n    else if (password.length >= 8 && password.length < 12 && symbols >= 2) {\n      setPasswordStrength(\"Strong\");\n      setIsButtonDisabled(false);\n      (styles.strengthMeter.backgroundColor as string) = \"lime\";\n    } \n    else if(password.length>=12 && symbols >=3) {\n      setPasswordStrength(\"Very Strong\");\n      (styles.strengthMeter.backgroundColor as string) = \"green\";\n      setIsButtonDisabled(false);\n    }\n  }, [password, symbols]);\n\n\n  // Button handler function\n  const buttonHandler = () => {\n    alert(\"You have entered a strong enough password\");\n    // Do other things here\n  };\n\n  return (\n    <div style={styles.container}>\n      <Top />\n      <h3>Please Input a String</h3>\n\n      {/* The input field */}\n      <input\n        type=\"password\"\n        value={password}\n        onChange={inputHandler}\n        placeholder=\"Enter a password\"\n        style={styles.password}\n      />\n\n      {/* This bar indicates the strength of the entered password */}\n      <div style={styles.statusBar}>\n        <div\n          style={{\n            ...styles.strengthMeter,\n            width: `${(password.length / 16) * 100}%`,\n            \n          }}\n        ></div>\n      </div>\n\n      {/* Password strength message */}\n      <div style={styles.message}>{passwordStrength}</div>\n\n      {//This button is only clickable when the entered password is strong enough }\n      <button\n        style={\n          isButtonDisabled\n            ? { ...styles.button, ...styles.disabledButton }\n            : styles.button\n        }\n        disabled={isButtonDisabled}\n        onClick={buttonHandler}\n      >\n        CONTINUE\n      </button>}\n    </div>\n  );\n};\n\n// Styling\nconst styles = {\n  container: {\n    width: \"60%\",\n    padding: \"30px 90px\",\n    margin: \"50px auto\",\n    background: \"tan\",\n    borderRadius: \"10px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  password: {\n    width: 300,\n    padding: \"8px 10px\",\n    border: \"1px solid #444\",\n    borderRadius: \"10px\",\n    outline: \"none\",\n  },\n  statusBar: {\n    width: 300,\n    height: 10,\n    marginTop: 20,\n    background: \"#fff\",\n    border: \"1px solid #444\",\n    borderRadius: \"5px\",\n  },\n  strengthMeter: {\n    height: \"100%\",\n    maxWidth: \"100%\",\n    backgroundColor: \"red\",\n  },\n  message: {\n    padding: \"20px 0\",\n  },\n  button: {\n    padding: \"15px 30px\",\n    cursor: \"pointer\",\n    background: \"purple\",\n    color: \"#fff\",\n    fontWeight: \"bold\",\n    border: \"none\",\n    borderRadius: \"30px\",\n  },\n  disabledButton: {\n    cursor: \"not-allowed\",\n    opacity: 0.3,\n  },\n} as const;\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}